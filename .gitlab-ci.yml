# Copyright (c) 2021. Erik Escher. PortuLock Keyserver. GPL-3.0-only.
# SPDX-License-Identifier: GPL-3.0-only

variables:
  # The "Description" parameter is not well documented, but it causes the variable to be prepopulated on
  # the "Run Pipeline" page, and it displays the description.
  TASK_NAME:
    value: ""
    description: "The task name to run on demand, please pick ONE from this list: audit,rebuild,deploy. Defaults to full pipeline if empty/unset."


stages:
  - build
  - test
  - quality
  - audit
  - images
  - demo

server_build:
  rules:
    - if: $TASK_NAME
      when: never
    - changes:
      - "portulock-keyserver/**/*"
      - ".gitlab-ci.yml"
  image: rustlang/rust:nightly
  stage: build
  before_script:
    - apt update && apt install --yes clang libclang-dev llvm llvm-dev lcov python3-pip librust-clang-sys*
    - cd portulock-keyserver
  script:
    - cargo build --release
  artifacts:
    paths:
      - portulock-keyserver/target/release/aggregator
      - portulock-keyserver/target/debug/aggregator
      - portulock-keyserver/target/release/verifier
      - portulock-keyserver/target/debug/verifier

server_test:
  rules:
    - if: $TASK_NAME
      when: never
    - changes:
      - "portulock-keyserver/**/*"
      - ".gitlab-ci.yml"
  image: rustlang/rust:nightly
  stage: test
  before_script:
    - apt update && apt install --yes clang libclang-dev llvm llvm-dev lcov python3-pip librust-clang-sys*
    - cd portulock-keyserver
  needs: []
  script:
    - cargo test

server_lint:
  rules:
    - if: $TASK_NAME
      when: never
    - changes:
      - "portulock-keyserver/**/*"
      - ".gitlab-ci.yml"
  image: rustlang/rust:nightly
  stage: quality
  before_script:
    - apt update && apt install --yes clang libclang-dev llvm llvm-dev lcov python3-pip librust-clang-sys*
    - rustup component add clippy
    - cd portulock-keyserver
  needs: []
  script:
    - cargo clippy -- -D warnings

server_format:
  rules:
    - if: $TASK_NAME
      when: never
    - changes:
      - "portulock-keyserver/**/*.rs"
      - "portulock-keyserver/rustfmt.toml"
      - ".gitlab-ci.yml"
  image: rustlang/rust:nightly
  stage: quality
  before_script:
    - cd portulock-keyserver
  needs: []
  script:
    - cargo fmt -- --check

server_audit:
  rules:
    - if: '$TASK_NAME == "audit"'
    - changes:
      - "portulock-keyserver/Cargo.lock"
      - "portulock-keyserver/**/Cargo.toml"
      - "portulock-keyserver/.cargo/audit.toml"
      - ".gitlab-ci.yml"
  image: rustlang/rust:nightly
  stage: audit
  before_script:
    - cargo install cargo-audit
    - cd portulock-keyserver
  needs: []
  script:
    - cargo audit

server_image_verifier:
  rules:
    - if: '$TASK_NAME == "rebuild"'
    - changes:
      - "portulock-keyserver/shared/**/*"
      - "portulock-keyserver/verifier/**/*"
      - ".gitlab-ci.yml"
      - "Dockerfile"
  image: docker
  stage: images
  before_script:
    - echo "$CI_REGISTRY_IMAGE $CI_JOB_ID $CI_COMMIT_BRANCH"
  script:
    - docker login --username="$CI_REGISTRY_USER" --password="$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --target verifier --tag verifier --label "git-commit=$CI_COMMIT_SHA" --label "ci-server=$CI_SERVER_HOST" --label "ci-job-id=$CI_JOB_ID" --label "git-branch=$CI_COMMIT_BRANCH" .
    - docker tag verifier $CI_REGISTRY_IMAGE/verifier:$CI_JOB_ID
    - docker tag verifier $CI_REGISTRY_IMAGE/verifier:$CI_COMMIT_BRANCH
    - docker push $CI_REGISTRY_IMAGE/verifier:$CI_JOB_ID
    - docker push $CI_REGISTRY_IMAGE/verifier:$CI_COMMIT_BRANCH

server_image_aggregator:
  rules:
    - if: '$TASK_NAME == "rebuild"'
    - changes:
      - "portulock-keyserver/shared/**/*"
      - "portulock-keyserver/aggregator/**/*"
      - ".gitlab-ci.yml"
      - "Dockerfile"
  image: docker
  stage: images
  before_script:
    - echo "$CI_REGISTRY_IMAGE $CI_JOB_ID $CI_COMMIT_BRANCH"
  script:
    - docker login --username="$CI_REGISTRY_USER" --password="$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --target aggregator --tag aggregator --label "git-commit=$CI_COMMIT_SHA" --label "ci-server=$CI_SERVER_HOST" --label "ci-job-id=$CI_JOB_ID" --label "git-branch=$CI_COMMIT_BRANCH" .
    - docker tag aggregator $CI_REGISTRY_IMAGE/aggregator:$CI_JOB_ID
    - docker tag aggregator $CI_REGISTRY_IMAGE/aggregator:$CI_COMMIT_BRANCH
    - docker push $CI_REGISTRY_IMAGE/aggregator:$CI_JOB_ID
    - docker push $CI_REGISTRY_IMAGE/aggregator:$CI_COMMIT_BRANCH

wasm_build:
  rules:
    - if: $TASK_NAME
      when: never
    - changes:
      - "keyserver-ui/**/*"
      - "openpgp-trustsign-wasm/**/*"
      - ".gitlab-ci.yml"
  image: rust
  stage: build
  before_script:
    - apt update && apt install --yes clang libclang-dev llvm llvm-dev librust-clang-sys*
    - rustup target add wasm32-unknown-unknown
    - cargo install wasm-pack --vers 0.9.1
    - cd openpgp-trustsign-wasm
  script:
    - wasm-pack build
  needs: []
  artifacts:
    paths:
      - openpgp-trustsign-wasm/pkg

wasm_lint:
  rules:
    - if: $TASK_NAME
      when: never
    - changes:
      - "openpgp-trustsign-wasm/**/*"
      - ".gitlab-ci.yml"
  image: rustlang/rust:nightly
  stage: quality
  before_script:
    - rustup component add clippy
    - cd openpgp-trustsign-wasm
  needs: []
  script:
    - cargo clippy -- -D warnings

wasm_format:
  rules:
    - if: $TASK_NAME
      when: never
    - changes:
      - "openpgp-trustsign-wasm/**/*.rs"
      - "openpgp-trustsign-wasm/rustfmt.toml"
      - ".gitlab-ci.yml"
  image: rustlang/rust:nightly
  stage: quality
  before_script:
    - rustup component add rustfmt
    - cd openpgp-trustsign-wasm
  needs: []
  script:
    - cargo fmt -- --check

wasm_audit:
  rules:
    - if: '$TASK_NAME == "audit"'
    - changes:
      - "openpgp-trustsign-wasm/Cargo.lock"
      - "openpgp-trustsign-wasm/**/Cargo.toml"
      - "openpgp-trustsign-wasm/.cargo/audit.toml"
  image: rustlang/rust:nightly
  stage: audit
  before_script:
    - cargo install cargo-audit
    - cd openpgp-trustsign-wasm
  script:
    - cargo audit

ui_build:
  rules:
    - if: $TASK_NAME
      when: never
    - changes:
      - "keyserver-ui/package.json"
      - "keyserver-ui/package-lock.json"
      - "keyserver-ui/**/*"
      - ".gitlab-ci.yml"
  image: node:lts
  stage: build
  before_script:
    - cd keyserver-ui
  needs:
    - wasm_build
  script:
    - npm install
    - npm run build
  artifacts:
    paths:
      - keyserver-ui/dist


ui_audit:
  rules:
    - if: '$TASK_NAME == "audit"'
    - changes:
      - "keyserver-ui/package.json"
      - "keyserver-ui/package-lock.json"
      - ".gitlab-ci.yml"
  image: node:lts
  stage: audit
  before_script:
    - cd keyserver-ui
  needs: []
  script:
    - npm audit --production

reverse_proxy_image:
  rules:
    - if: '$TASK_NAME == "rebuild"'
    - changes:
      - "reverse-proxy/**"
      - "keyserver-ui/**"
      - "openpgp-trustsign-wasm/**"
      - ".gitlab-ci.yml"
      - "Dockerfile"
  image: docker
  stage: images
  before_script:
    - echo "$CI_REGISTRY_IMAGE $CI_JOB_ID $CI_COMMIT_BRANCH"
  script:
    - docker login --username="$CI_REGISTRY_USER" --password="$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --target reverse_proxy --tag reverse_proxy --label "git-commit=$CI_COMMIT_SHA" --label "ci-server=$CI_SERVER_HOST" --label "ci-job-id=$CI_JOB_ID" --label "git-branch=$CI_COMMIT_BRANCH" .
    - docker tag reverse_proxy $CI_REGISTRY_IMAGE/reverse_proxy:$CI_JOB_ID
    - docker tag reverse_proxy $CI_REGISTRY_IMAGE/reverse_proxy:$CI_COMMIT_BRANCH
    - docker push $CI_REGISTRY_IMAGE/reverse_proxy:$CI_JOB_ID
    - docker push $CI_REGISTRY_IMAGE/reverse_proxy:$CI_COMMIT_BRANCH
  needs: []

deploy_demo:
  rules:
    - if: '$TASK_NAME == "deploy"'
    - if: '$CI_COMMIT_BRANCH == "master"'
  stage: demo
  inherit:
    variables: false
  trigger: portulock/portulock-demo
